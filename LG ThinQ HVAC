/**
 *  LG HVAC
 *
 *  Copyright 2021
 *
 * This code is a copy from dmeglio@gmail.com.
 * Since I'm not a groovy coder I decided to copy his code and modify it with his agreement
 * The work he did to create this code is AMAZING !  My work is nothing compare to him.
 * He did 90% of the code, but he did 99.9999% of the work !
 */

import groovy.transform.Field
import groovy.json.JsonSlurper

@Field List<String> LOG_LEVELS = ["error", "warn", "info", "debug", "trace"]
@Field String DEFAULT_LOG_LEVEL = LOG_LEVELS[2]

metadata {
    definition(name: "LG ThinQ HVAC", namespace: "jbilodea", author: "Jean Bilodeau") {
        capability "Sensor"
        capability "Switch"
        capability "Initialize"

        attribute "diagCode", "number"
        attribute "DirStep", "number"
        attribute "lighting.display", "number"
        attribute "miscFunc.antiBugs", "number"
        attribute "miscFunc.autoDry", "number"
        attribute "miscFunc.extraOp", "number"
        attribute "Mode.airClean", "number"
        attribute "Mode.jet", "number"
        attribute "Mode.lowHeating", "number"
        attribute "operation", "number"
        attribute "opMode", "number"
        attribute "powerSave.basic", "number"
        attribute "quality.PM1", "number"
        attribute "quality.PM10", "number"
        attribute "quality.PM2", "number"
        attribute "quality.sensorMon", "number"
        attribute "sleepTime", "number"
        attribute "targetTimeToStart", "number"
        attribute "targetTimeToStop", "number"
        attribute "temp.current", "number"
        attribute "temp.target", "number"
        attribute "windStrength", "number"

        command "qwindStrength",   [name: "windStrength",type:"NUMBER", description: "Strength of the wind"]
        
    }

    preferences {
      section { // General
        input name: "logLevel", title: "Log Level", type: "enum", options: LOG_LEVELS, defaultValue: DEFAULT_LOG_LEVEL, required: false
        input name: "logDescText", title: "Log Description Text", type: "bool", defaultValue: false, required: false
      }
    }
}

def uninstalled() {
    logger("debug", "uninstalled()")
    parent.stopRTIMonitoring(device)
}

def initialize() {
    logger("debug", "initialize()")

    if (getDataValue("master") == "true") {
        if (interfaces.mqtt.isConnected())
            interfaces.mqtt.disconnect()

        mqttConnectUntilSuccessful()
    }

    parent.registerRTIMonitoring(device)
}

def on() {
   
    //                                  command,ctrlKey,     dataKey,              dataValue
    result = parent.sendCommand(device, "Set",  "basicCtrl", "airState.operation", 1)
}

def off() {
   
    //                                  command, ctrlKey,     dataKey,             dataValue
    result = parent.sendCommand(device, "Set",  "basicCtrl", "airState.operation", 0)
}

def qwindStrength(pwindStrength) {
   
    if (pwindStrength != null)
        //                                  command, ctrlKey,     dataKey,             dataValue
        result = parent.sendCommand(device, "Set",  "basicCtrl", "airState.windStrength", pwindStrength)
}

def mqttConnectUntilSuccessful() {
  logger("debug", "mqttConnectUntilSuccessful()")

  try {
    def mqtt = parent.retrieveMqttDetails()

    interfaces.mqtt.connect(mqtt.server,
                            mqtt.clientId,
                            null,
                            null,
                            tlsVersion: "1.2",
                            privateKey: mqtt.privateKey,
                            caCertificate: mqtt.caCertificate,
                            clientCertificate: mqtt.certificate,
                            ignoreSSLIssues: true)
    pauseExecution(3000)
    for (sub in mqtt.subscriptions) {
        interfaces.mqtt.subscribe(sub, 0)
    }
    return true
  }
  catch (e)
  {
    logger("warn", "Lost connection to MQTT, retrying in 15 seconds ${e}")
    runIn(15, "mqttConnectUntilSuccessful")
    return false
  }
}

def parse(message) {
    logger("debug", "JBDEV01 ${message}")
    def topic = interfaces.mqtt.parseMessage(message)
    def payload = new JsonSlurper().parseText(topic.payload)
    logger("trace", "parse(${payload})")

    parent.processMqttMessage(this, payload)
}

def mqttClientStatus(String message) {
    logger("debug", "mqttClientStatus(${message})")

    if (message.startsWith("Error:")) {
        logger("error", "MQTT Error: ${message}")

        try {
            interfaces.mqtt.disconnect() // Guarantee we're disconnected
        }
        catch (e) {
        }
        mqttConnectUntilSuccessful()
    }
}

def processStateData(data) {
    
    logger("debug", "processStateData(${data})")

    def wDirhStep = 0
    def windStrength = 0
    def qualityPM10 = 0
    def tempStatecurrent = 0
    def qualityoverall = 0
    def reservationtargetTimeToStart = 0
    def reservationtargetTimeToStop = 0
    def tempStatetarget = 0
    def wModejet = 0
    def wDirvStep = 0
    def powerSavebasic = 0
    def qualityPM1 = 0
    def qualityPM2 = 0
    def diagCode = 0
    def operation = 0
    def miscFuncStateextraOp = 0
    def wModelowHeating = 0
    def lightingStatedisplayControl = 0
    def wModeairClean = 0
    def qualitysensorMon = 0
    def miscFuncStateantiBugs = 0
    def reservationsleepTime = 0
    def miscFuncStateautoDry = 0
    def opMode = 0

    if (parent.checkValue(data,'airState.wDir.hStep')) {
		wDirhStep = (data["airState.wDir.hStep"])
        sendEvent(name: "DirStep", value: wDirhStep, displayed: false)}
    if (parent.checkValue(data, "airState.windStrength")) {
		windStrength = (data["airState.windStrength"])
        sendEvent(name: "windStrength", value: windStrength, displayed: false)}
    if (parent.checkValue(data, "airState.quality.PM10")) {
		qualityPM10 = (data["airState.quality.PM10"])
        sendEvent(name: "quality.PM10", value: qualityPM10, displayed: false)}
    if (parent.checkValue(data, "airState.tempState.current")){
		tempStatecurrent = (data["airState.tempState.current"])
        sendEvent(name: "temp.current", value: tempStatecurrent, displayed: false)}
    if (parent.checkValue(data, "airState.quality.overall")){
		qualityoverall = (data["airState.quality.overall"])
        sendEvent(name: "quality.overall", value: qualityoverall, displayed: false)}
    if (parent.checkValue(data, "airState.reservation.targetTimeToStart")){
		reservationtargetTimeToStart = (data["airState.reservation.targetTimeToStart"])
        sendEvent(name: "targetTimeToStart", value: reservationtargetTimeToStart, displayed: false)}
    if (parent.checkValue(data, "airState.reservation.targetTimeToStop")){
		reservationtargetTimeToStop = (data["airState.reservation.targetTimeToStop"])
        sendEvent(name: "targetTimeToStop", value: reservationtargetTimeToStop, displayed: false)}
    if (parent.checkValue(data, "airState.tempState.target")){
		tempStatetarget = (data["airState.tempState.target"])
        sendEvent(name: "temp.target", value: tempStatetarget, displayed: false)}
    if (parent.checkValue(data, "airState.wMode.jet")){
		wModejet = (data["airState.wMode.jet"])
        sendEvent(name: "Mode.jet", value: wModejet, displayed: false)}
    if (parent.checkValue(data, "airState.powerSave.basic")){
		powerSavebasic = (data["airState.powerSave.basic"])
        sendEvent(name: "powerSave.basic", value: powerSavebasic, displayed: false)}
    if (parent.checkValue(data, "airState.quality.PM1")){
		qualityPM1 = (data["airState.quality.PM1"])
        sendEvent(name: "quality.PM1", value: qualityPM1, displayed: false)}
    if (parent.checkValue(data, "airState.quality.PM2")){
		qualityPM2 = (data["airState.quality.PM2"])
        sendEvent(name: "quality.PM2", value: qualityPM2, displayed: false)}
    if (parent.checkValue(data, "airState.diagCode")){
		diagCode = (data["airState.diagCode"])
        sendEvent(name: "diagCode", value: diagCode, displayed: false)}
    if (parent.checkValue(data, "airState.operation")){
		operation = (data["airState.operation"])
        sendEvent(name: "operation", value: operation, displayed: false)}
    if (parent.checkValue(data, "airState.miscFuncState.extraOp")){
		miscFuncStateextraOp = (data["airState.miscFuncState.extraOp"])
        sendEvent(name: "miscFunc.extraOp", value: miscFuncStateextraOp, displayed: false)}
    if (parent.checkValue(data, "airState.wMode.lowHeating")){
		wModelowHeating = (data["airState.wMode.lowHeating"])
        sendEvent(name: "Mode.lowHeating", value: wModelowHeating, displayed: false)}
    if (parent.checkValue(data, "airState.lightingState.displayControl")){
		lightingStatedisplayControl = (data["airState.lightingState.displayControl"])
        sendEvent(name: "lighting.display", value: lightingStatedisplayControl, displayed: false)}
    if (parent.checkValue(data, "airState.wMode.airClean")){
		wModeairClean = (data["airState.wMode.airClean"])
        sendEvent(name: "Mode.airClean", value: wModeairClean, displayed: false)}
    if (parent.checkValue(data, "airState.quality.sensorMon")){
		qualitysensorMon = (data["airState.quality.sensorMon"])
        sendEvent(name: "quality.sensorMon", value: qualitysensorMon, displayed: false)}
    if (parent.checkValue(data, "airState.miscFuncState.antiBugs")){
		miscFuncStateantiBugs = (data["airState.miscFuncState.antiBugs"])
        sendEvent(name: "miscFunc.antiBugs", value: miscFuncStateantiBugs, displayed: false)}
    if (parent.checkValue(data, "airState.reservation.sleepTime")){
		reservationsleepTime = (data["airState.reservation.sleepTime"])
        sendEvent(name: "sleepTime", value: reservationsleepTime, displayed: false)}
    if (parent.checkValue(data, "airState.miscFuncState.autoDry")){
		miscFuncStateautoDry = (data["airState.miscFuncState.autoDry"])
        sendEvent(name: "miscFunc.autoDry", value: miscFuncStateautoDry, displayed: false)}
    if (parent.checkValue(data, "airState.opMode")){
		opMode = (data["airState.opMode"])
        sendEvent(name: "opMode", value: opMode, displayed: false)}
  
    def currentStateSwitch = ""
    if (operation == 1)
     currentStateSwitch = "on"
    else
     currentStateSwitch = "off"
        
      sendEvent(name: "switch", value: currentStateSwitch, descriptionText: "Was turned ${currentStateSwitch}")
}

/**
* @param level Level to log at, see LOG_LEVELS for options
* @param msg Message to log
*/
private logger(level, msg) {
  if (level && msg) {
    Integer levelIdx = LOG_LEVELS.indexOf(level)
    Integer setLevelIdx = LOG_LEVELS.indexOf(logLevel)
    if (setLevelIdx < 0) {
      setLevelIdx = LOG_LEVELS.indexOf(DEFAULT_LOG_LEVEL)
    }
    if (levelIdx <= setLevelIdx) {
      log."${level}" "${device.displayName} ${msg}"
    }
  }
}
