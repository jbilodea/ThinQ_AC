/**
 *  LG HVAC
 *
 *  Copyright 2021
 *
 * This code is a copy from dmeglio@gmail.com.
 * Since I'm not a groovy coder I decided to copy his code and modify it with his agreement
 */

import groovy.transform.Field
import groovy.json.JsonSlurper

@Field List<String> LOG_LEVELS = ["error", "warn", "info", "debug", "trace"]
@Field String DEFAULT_LOG_LEVEL = LOG_LEVELS[2]

metadata {
    definition(name: "LG ThinQ HVAC", namespace: "jbilodea", author: "Jean Bilodeau") {
        capability "Sensor"
        capability "Switch"
        capability "Initialize"

        attribute "windStrength", "number"
    }

    preferences {
      section { // General
        input name: "logLevel", title: "Log Level", type: "enum", options: LOG_LEVELS, defaultValue: DEFAULT_LOG_LEVEL, required: false
        input name: "logDescText", title: "Log Description Text", type: "bool", defaultValue: false, required: false
      }
    }
}

def uninstalled() {
    logger("debug", "uninstalled()")
    parent.stopRTIMonitoring(device)
}

def initialize() {
    logger("debug", "initialize()")

    if (getDataValue("master") == "true") {
        if (interfaces.mqtt.isConnected())
            interfaces.mqtt.disconnect()

        mqttConnectUntilSuccessful()
    }

    parent.registerRTIMonitoring(device)
}

def on() {
   
    //                                  command, ctrlKey,     dataKey,             dataValue
//    def result = parent.sendCommand(device, "Get",  "basicCtrl", "airState.windStrength", 1)
    result = parent.sendCommand(device, "Set",  "basicCtrl", "airState.operation", 1)

	logger("debug", "sendCommand0 ${device} ")
	logger("debug", "sendCommand1 ${result} ")
}

def off() {
   
    //                                  command, ctrlKey,     dataKey,             dataValue
    result = parent.sendCommand(device, "Set",  "basicCtrl", "airState.operation", 0)

	logger("debug", "sendCommand2 ${result} ")
	logger("debug", "sendCommand3 ${result.data} ")
}
			

def mqttConnectUntilSuccessful() {
  logger("debug", "mqttConnectUntilSuccessful()")

  try {
    def mqtt = parent.retrieveMqttDetails()

    interfaces.mqtt.connect(mqtt.server,
                            mqtt.clientId,
                            null,
                            null,
                            tlsVersion: "1.2",
                            privateKey: mqtt.privateKey,
                            caCertificate: mqtt.caCertificate,
                            clientCertificate: mqtt.certificate,
                            ignoreSSLIssues: true)
    pauseExecution(3000)
    for (sub in mqtt.subscriptions) {
        interfaces.mqtt.subscribe(sub, 0)
    }
    return true
  }
  catch (e)
  {
    logger("warn", "Lost connection to MQTT, retrying in 15 seconds ${e}")
    runIn(15, "mqttConnectUntilSuccessful")
    return false
  }
}

def parse(message) {
    logger("debug", "JBDEV01 ${message}")
    def topic = interfaces.mqtt.parseMessage(message)
    def payload = new JsonSlurper().parseText(topic.payload)
    logger("trace", "parse(${payload})")

    parent.processMqttMessage(this, payload)
}

def mqttClientStatus(String message) {
    logger("debug", "mqttClientStatus(${message})")

    if (message.startsWith("Error:")) {
        logger("error", "MQTT Error: ${message}")

        try {
            interfaces.mqtt.disconnect() // Guarantee we're disconnected
        }
        catch (e) {
        }
        mqttConnectUntilSuccessful()
    }
}

def processStateData(data) {
    
    logger("debug", "processStateData(${data})")

    def wDirhStep = 0
    def windStrength = 0
    def qualityPM10 = 0
    def tempStatecurrent = 0
    def qualityoverall = 0
    def reservationtargetTimeToStart = 0
    def reservationtargetTimeToStop = 0
    def tempStatetarget = 0
    def wModejet = 0
    def wDirvStep = 0
    def powerSavebasic = 0
    def qualityPM1 = 0
    def qualityPM2 = 0
    def diagCode = 0
    def operation = 0
    def miscFuncStateextraOp = 0
    def wModelowHeating = 0
    def lightingStatedisplayControl = 0
    def wModeairClean = 0
    def qualitysensorMon = 0
    def miscFuncStateantiBugs = 0
    def reservationsleepTime = 0
    def miscFuncStateautoDry = 0
    def opMode = 0


    wDirhStep = (data["wDir.hStep"])
    windStrength = (data["windStrength"])
    qualityPM10 = (data["quality.PM10"])
    tempStatecurrent = (data["tempState.current"])
    qualityoverall = (data["quality.overall"])
    reservationtargetTimeToStart = (data["reservation.targetTimeToStart"])
    reservationtargetTimeToStop = (data["reservation.targetTimeToStop"])
    tempStatetarget = (data["tempState.target"])
    wModejet = (data["wMode.jet"])
    wDirvStep = (data["wDir.vStep"])
    powerSavebasic = (data["powerSave.basic"])
    qualityPM1 = (data["quality.PM1"])
    qualityPM2 = (data["quality.PM2"])
    diagCode = (data["diagCode"])
    operation = (data["operation"])
    miscFuncState.extraOp = (data["miscFuncState.extraOp"])
    wMode.lowHeating = (data["wMode.lowHeating"])
    lightingState.displayControl = (data["lightingState.displayControl"])
    wMode.airClean = (data["wMode.airClean"])
    quality.sensorMon = (data["quality.sensorMon"])
    miscFuncState.antiBugs = (data["miscFuncState.antiBugs"])
    reservation.sleepTime = (data["reservation.sleepTime"])
    miscFuncState.autoDry = (data["miscFuncState.autoDry"])
    opMode = (data["opMode"])
 
    sendEvent(name: "wDir.hStep", value: wDirhStep)
    sendEvent(name: "windStrength", value: windStrength)
    sendEvent(name: "quality.PM10", value: qualityPM10)
    sendEvent(name: "tempState.current", value: tempStatecurrent)
    sendEvent(name: "quality.overall", value: qualityoverall)
    sendEvent(name: "reservation.targetTimeToStart", value: reservationtargetTimeToStart)
    sendEvent(name: "reservation.targetTimeToStop", value: reservationtargetTimeToStop)
    sendEvent(name: "tempState.target", value: tempStatetarget)
    sendEvent(name: "wMode.jet", value: wModejet)
    sendEvent(name: "wDir.vStep", value: wDirvStep)
    sendEvent(name: "powerSave.basic", value: powerSavebasic)
    sendEvent(name: "quality.PM1", value: qualityPM1)
    sendEvent(name: "quality.PM2", value: qualityPM2)
    sendEvent(name: "diagCode", value: diagCode)
    sendEvent(name: "operation", value: operation)
    sendEvent(name: "miscFuncState.extraOp", value: miscFuncStateextraOp)
    sendEvent(name: "wMode.lowHeating", value: wModelowHeating)
    sendEvent(name: "lightingState.displayControl", value: lightingStatedisplayControl)
    sendEvent(name: "wMode.airClean", value: wModeairClean)
    sendEvent(name: "quality.sensorMon", value: qualitysensorMon)
    sendEvent(name: "miscFuncState.antiBugs", value: miscFuncStateantiBugs)
    sendEvent(name: "reservation.sleepTime", value: reservationsleepTime)
    sendEvent(name: "miscFuncState.autoDry", value: miscFuncStateautoDry)
    sendEvent(name: "opMode", value: opMode)

 
      def currentStateSwitch = (currentStateName =~ /power off/ ? 'off' : 'on')
      if (device.currentValue("switch") != currentStateSwitch) {
        if(logDescText) {
            log.info "${device.displayName} Was turned ${currentStateSwitch}"
        } else {
          logger("info", "Was turned ${currentStateSwitch}")
        }
      }
      sendEvent(name: "switch", value: currentStateSwitch, descriptionText: "Was turned ${currentStateSwitch}")
}

/**
* @param level Level to log at, see LOG_LEVELS for options
* @param msg Message to log
*/
private logger(level, msg) {
  if (level && msg) {
    Integer levelIdx = LOG_LEVELS.indexOf(level)
    Integer setLevelIdx = LOG_LEVELS.indexOf(logLevel)
    if (setLevelIdx < 0) {
      setLevelIdx = LOG_LEVELS.indexOf(DEFAULT_LOG_LEVEL)
    }
    if (levelIdx <= setLevelIdx) {
      log."${level}" "${device.displayName} ${msg}"
    }
  }
}
